name: https-testing-docker
services:
  # The `ca` service creates a key and certificate for a fake Certificate
  # Authority which can be injected into other containers to have signed and
  # verified TLS certificates on HTTPS servers that require it. It also
  # generates a key and certificate for a service with the Common Name defined
  # in `SSL_SUBJECT`, signing the certificate with the CA key from earlier in
  # in the process.
  ca:
    image: paulczar/omgwtfssl:latest@sha256:b7b5b9360de8c772f705b7757772782c17a675289d8d1f40d119aae5cbdc917f
    environment:
      SSL_SUBJECT: mock-server
      # SSL_DNS causes omgwtfssl to set a SAN in our certificate, which is
      # required by the SSL library used in user-service. Add extra hostnames
      # for the HTTPS server here as a comma-separated list of hostnames.
      SSL_DNS: mock-server,www.mock-server
      # By default, the certificate generated by omgwtfssl is named "ca.pem",
      # but `ca-certificates`' `update-ca-certificates` command requires
      # certificates added to `/usr/local/share/ca-certificates` to have a
      # `.crt` file extension.
      CA_CERT: ca.crt
    volumes:
      - certs:/certs:rw

  # The `certificates` service just bundles together certificates handed to it.
  # It's a simple `update-ca-certificates` command, with some niceties on top to
  # make its resulting CA root store folder re-usable by other containers. Using
  # `/etc/ssl/certs` as a volume, we don't have to inject the CA certificate
  # from the `ca` service manually, and can instead just use the volume.
  certificates:
    image: kalaksi/ca-certificates:latest@sha256:0552863f1922774ce37c6480d14e28a5a80de72730d7920f6c31a085173c57f4
    depends_on:
      ca:
        condition: service_completed_successfully
    volumes:
      - certs:/additional_certs:ro
      - ca-root-store:/etc/ssl/certs:rw

  mock-server:
    build:
      context: "."
    command: npx esrun ./mock-server.ts
    environment:
      KEY_PATH: /certs/key.pem
      CRT_PATH: /certs/cert.pem
      # Necessary for NodeJS to consider our certificate as a valid cert.
      # See https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file
      NODE_EXTRA_CA_CERTS: "/etc/ssl/certs/ca-certificates.crt"
    networks:
      default:
        aliases:
          - www.mock-server
    depends_on:
      ca:
        condition: service_completed_successfully
      certificates:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "https://mock-server/api"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - certs:/certs
      - ca-root-store:/etc/ssl/certs:ro

  mock-client:
    build:
      context: "."
    command: npx esrun ./mock-client.ts
    depends_on:
      certificates:
        condition: service_completed_successfully
      mock-server:
        condition: service_healthy
    environment:
      SERVER_HOSTNAME: mock-server
      # Necessary for NodeJS to consider our certificate as a valid cert.
      # See https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file
      NODE_EXTRA_CA_CERTS: "/etc/ssl/certs/ca-certificates.crt"
    volumes:
      - ca-root-store:/etc/ssl/certs:ro

volumes:
  # Contains certificates generated by the `ca` service.
  certs:
  # Contains the root CA store generated by the `certificates` service.
  ca-root-store:
